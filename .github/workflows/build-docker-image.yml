#
# GitHub Actions 工作流：创建并发布 Docker 镜像
#

name: Create and publish a Docker image

# 触发条件：
# - 当代码被推送到 main 或 release 分支时
# - 当一个以 v* (例如 v1.0, v2.3.4) 格式的标签被推送时
on:
  push:
    branches:
      - release
      - main
    tags:
      - v*

# 环境变量：
# REGISTRY: 容器镜像仓库的域名
# IMAGE_NAME: Docker 镜像的名称，使用 GitHub 仓库名
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    # 在最新版的 Ubuntu 运行器上执行
    runs-on: ubuntu-latest
    
    # 为此 job 中的 actions 授予 GITHUB_TOKEN 必要的权限
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      
    steps:
      # 步骤 1: 检出代码
      # 将你的仓库代码下载到运行器中，以便工作流可以访问它。
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 登录到 GitHub Container Registry (ghcr.io)
      # 使用 GITHUB_TOKEN 进行安全认证。
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 3: 设置 Docker Buildx
      # 这是解决 "Cache export is not supported" 错误的关键步骤。
      # 它会创建一个支持高级缓存功能的 buildx 构建器实例。
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 4: 提取 Docker 元数据 (标签和 Label)
      # 自动生成合适的 Docker 镜像标签，例如 latest, v1.0.0, main 等。
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # 步骤 5: 构建并推送 Docker 镜像
      # 这是核心步骤，包含了解决 "unknown blob" 错误的缓存配置。
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # 使用 GitHub Actions 的缓存作为后端，以提高稳定性和构建速度
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # 步骤 6: 生成制品证明
      # 创建一个关于镜像来源和构建方式的、不可伪造的声明，以增强供应链安全。
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
